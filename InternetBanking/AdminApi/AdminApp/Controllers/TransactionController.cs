using AdminApp.AutoGeneratedModel;
using AdminApp.Filters;
using AdminApp.ViewModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;

namespace AdminApp.Controllers
{
    [AuthorizeAdmin]
    public class TransactionController : Controller
    {
        private readonly IHttpClientFactory _clientFactory;
        private readonly ILogger<TransactionController> _logger;
        private HttpClient Client => _clientFactory.CreateClient("api");

        public TransactionController(IHttpClientFactory clientFactory, ILogger<TransactionController> logger)
        {
            _clientFactory = clientFactory;
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public async Task<IActionResult> Index(TransactionViewModel viewModel)
        {
            var customer = await GetCustomerAsync(viewModel.CustomerID).ConfigureAwait(false);

            // Get accounts for customer
            viewModel.Accounts = customer.Accounts.ToList();
            var transactions = new List<Transaction>();
            foreach(var account in viewModel.Accounts)
            {
                if(account != null)
                {
                    var transactionList = await GetTransactionsAsync(account.AccountNumber).ConfigureAwait(false);
                    transactions.Concat(transactionList);
                }
            }
            viewModel.Transactions = transactions;
            return View(viewModel);
        }


        private async Task<List<Transaction>> GetTransactionsAsync(int accountNumber)
        {
            var id = accountNumber.ToString();
            var transactionResponse = await Client.GetAsync($"api/transaction/{id}");

            if (!transactionResponse.IsSuccessStatusCode)
            {
                _logger.LogError($"Unable to find transactions for account {accountNumber}");
                ModelState.AddModelError(string.Empty, $"Unable to find transactions for account {accountNumber}");
            }

            var result = await transactionResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            var transactions = JsonConvert.DeserializeObject<List<Transaction>>(result);
            return transactions;
        }

        private async Task<Customer> GetCustomerAsync(int id)
        {
            var customerID = id.ToString();
            var customerResponse = await Client.GetAsync($"api/customer/{customerID}").ConfigureAwait(false);

            if (!customerResponse.IsSuccessStatusCode)
            {
                _logger.LogError($"Unable to find customer with {customerID}");
                ModelState.AddModelError(string.Empty, $"Unable to find customer with {customerID}");
            }
            var result = await customerResponse.Content.ReadAsStringAsync().ConfigureAwait(false);

            var customer = JsonConvert.DeserializeObject<Customer>(result);

            return customer;
        }
    }
}
