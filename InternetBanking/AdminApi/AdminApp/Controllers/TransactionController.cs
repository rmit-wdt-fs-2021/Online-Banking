using AdminApp.AutoGeneratedModel;
using AdminApp.Filters;
using AdminApp.Interfaces;
using AdminApp.ViewModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;

namespace AdminApp.Controllers
{

    [AuthorizeAdmin]
    public class TransactionController : Controller
    {
        private readonly ICustomerService _customerService;
        private readonly ITransactionService _transactionService;
        private readonly IAccountService _accountService;
        private readonly ILogger<TransactionController> _logger;

        public TransactionController(ICustomerService customerService, ITransactionService transactionService,
                                     IAccountService accountService, ILogger<TransactionController> logger)
        {
            _customerService = customerService;
            _transactionService = transactionService;
            _accountService = accountService;
            _logger = logger;
        }
        
        public async Task<IActionResult> Index(TransactionViewModel viewModel)
        {
            if (viewModel.CustomerID == 0)
            {
                var transactions = await _transactionService.GetAllTransactionsAsync().ConfigureAwait(false);
                return View(new TransactionViewModel
                {
                    Transactions = transactions
                });
            }
            else
            {
                var accounts = await _accountService.GetAccountsFromCustomerAsync(viewModel.CustomerID);
                var transactions = await GetTransactionsAsync(accounts, viewModel.FromDate, viewModel.ToDate).ConfigureAwait(false);
                return View(new TransactionViewModel
                {
                    Transactions = transactions
                });
            }
        }


        private async Task<List<Transaction>> GetTransactionsAsync(List<Account> accounts, DateTime? fromDate = null, DateTime? toDate = null)
        {
            var transactions = new List<Transaction>();
            foreach (var account in accounts)
            {
                if(account != null)
                {
                    var transactionList = await _transactionService.GetTransactionsAsync(account.AccountNumber, fromDate, toDate).ConfigureAwait(false);
                    if(transactionList == null)
                    {
                        _logger.LogError($"Unable to get any transactions for {account.AccountNumber}");
                    }
                    transactions.AddRange(transactionList);
                }
            }

            return transactions;
        }

    }
}
