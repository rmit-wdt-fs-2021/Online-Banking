using AdminApp.AutoGeneratedModel;
using AdminApp.Interfaces;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;

namespace AdminApp.Services
{
    public class CustomerService : ICustomerService
    {
        private readonly IHttpClientFactory _clientFactory;
        private readonly ILogger<CustomerService> _logger;
        private HttpClient Client => _clientFactory.CreateClient("api");
        private const string prefix = "api/customer";

        public CustomerService(IHttpClientFactory clientFactory, ILogger<CustomerService> logger)
        {
            _clientFactory = clientFactory;
            _logger = logger;
        }

        public async Task<Customer> GetCustomerAsync(int id)
        {
            var customerID = id.ToString();
            var customerResponse = await Client.GetAsync($"{prefix}/{customerID}").ConfigureAwait(false);

            if (!customerResponse.IsSuccessStatusCode)
            {
                _logger.LogError($"Unable to find customer with {customerID}");
            }
            var result = await customerResponse.Content.ReadAsStringAsync().ConfigureAwait(false);

            var customer = JsonConvert.DeserializeObject<Customer>(result);

            return customer;
        }

        public async Task<List<Customer>> GetAllCustomersAsync()
        {
            var response = await Client.GetAsync($"{prefix}").ConfigureAwait(false);
            if (!response.IsSuccessStatusCode)
            {
                _logger.LogError("Unable to get any customers");
            }

            var result = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            return JsonConvert.DeserializeObject<List<Customer>>(result);
        }
    }
}
