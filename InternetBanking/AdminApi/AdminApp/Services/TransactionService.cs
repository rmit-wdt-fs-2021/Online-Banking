using AdminApp.AutoGeneratedModel;
using AdminApp.Controllers;
using AdminApp.Interfaces;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;

namespace AdminApp.Services
{
    public class TransactionService : ITransactionService
    {
        private readonly IHttpClientFactory _clientFactory;
        private readonly ILogger<TransactionService> _logger;
        private HttpClient Client => _clientFactory.CreateClient("api");

        public TransactionService(IHttpClientFactory clientFactory, ILogger<TransactionService> logger)
        {
            _clientFactory = clientFactory;
            _logger = logger;
        }

        public async Task<List<Transaction>> GetAllTransactionsAsync()
        {
            var transactionResponse = await Client.GetAsync($"api/transaction");

            if (!transactionResponse.IsSuccessStatusCode)
            {
                _logger.LogError($"Unable to find any transactions.");
            }

            var result = await transactionResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            var transactions = JsonConvert.DeserializeObject<List<Transaction>>(result);
            return transactions;
        }

        public async Task<List<Transaction>> GetTransactionsAsync(int accountNumber, DateTime? fromDate = null, DateTime? toDate = null)
        {
            var id = accountNumber.ToString();
            var transactionResponse = await Client.GetAsync($"api/transaction/{id}");

            if (!transactionResponse.IsSuccessStatusCode)
            {
                _logger.LogError($"Unable to find transactions for account {accountNumber}");
            }

            var result = await transactionResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            var transactions = JsonConvert.DeserializeObject<List<Transaction>>(result);
            return transactions;
        }

        public async Task<List<Transaction>> GetCustomerTransactionsAsync(Customer customer, DateTime? fromDate = null, DateTime? toDate = null)
        {
            var transactions = new List<Transaction>();
            foreach (var account in customer.Accounts)
            {
                if(account != null)
                {
                    var transactionList = await GetTransactionsAsync(account.AccountNumber, fromDate, toDate).ConfigureAwait(false);
                    transactions.Concat(transactionList);
                }
            }

            return transactions;
        }

    }
}
